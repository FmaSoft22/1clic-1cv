<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="format-detection" content="telephone=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="author" content="FMA-SOFT">
        <meta name="keywords" content="Generateur de  CV, Curriculum Vitae , CV en ligne">
        <meta name="description" content="Rédiger une lettre de motivation n'a jamais été aussi simple avec nos contenus pré-écrits. Simplifiez-vous la tâche grâce à notre contenu prérédigé et validé par nos experts. Il vous guide pas à pas. Exemples Pré-Rédigés. Facile à Utiliser. Large Choix de Modèles.">
		<title>
			{% block title %}
			   CV Parfait
			{% endblock %}
		</title>
		<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        <link rel="stylesheet" href="/styles/fmaStyles.css" />
		<link rel="stylesheet" href="/plugins/css/themify-icons.css" />
		<script>
			function resizeIframe(frame){
				frame.style.height = frame.contentWindow.document.documentElement.scrollHeight + 'px';
				frame.style.width = frame.contentWindow.document.documentElement.scrollWidth + 'px';
				frame.style.visibility="block";
			}
		</script>
		<script src="/plugins/js/jquery.min.js"></script>
		<script src="/tinymce/tinymce.min.js"></script>
	</head>
	<body>
	{% include 'Shared/_HeaderSection.html.twig' %}
    <main  class="container-fluid" style="padding:0 !important;">
       {% block body %}
		   {% include 'Shared/_Banner.html.twig' %}
       {% endblock %}
    </main>
    {% include 'Shared/_FooterSection.html.twig' %}
	<script>
		let templateframe = document.getElementById('template-frame');
		let firstnameField =$('#firstname');
		let lastnameField = $('#lastname');
		let experienceStocks = [];
		let candidateModelData = {};
		let educationStocks = [];
		let skillStock = [];
		let viewCandidate = {};
		let currentColor = '';
		let currentTemplateChoice='{{ curTempGuid }}';
		let candidate = function (firstname,lastname,emailAddress,phoneNumber,fonction,resume,location,dateOfBirh,nationality,countryID, town, civility, midllename){
			this.firstname=firstname;
			this.lastname=lastname;
			this.emailAddress=emailAddress;
			this.phoneNumber = phoneNumber;
			this.fonction =fonction;
			this.resume =resume;
			this.location = location;
			this.dateOfBirth = dateOfBirh;
			this.nationality = nationality;
			this.countryID = countryID;
			this.town = town;
			this.middlename = midllename;
			this.citivity = civility;

			this.getFirstname = function (){
				return this.firstname;
			}
			this.getLastname = function (){
				return this.lastname;
			}
			this.getEmailAddress = function (){
				return this.emailAddress;
			}
			this.getPhoneNumber = function (){
				return this.phoneNumber;
			}
			this.getfonction = function (){
				return this.fonction;
			}
			this.getResume = function (){
				return this.resume;
			}
			this.setFirstname=  function (firstname){
				this.firstname = firstname;
			}
			this.setLastname = function (lastname){
				this.lastname = lastname;
			}
			this.setFonction = function (fonction){
				this.fonction = fonction;
			}
			this.setResume = function (resume){
				this.resume = resume;
			}
			this.setPhoneNumber = function (phoneNumber){
				this.phoneNumber = phoneNumber;
			}
		}
		let ViewModelCandidate = function (){
			this.CandidateModel = {};
			this.experiences = [];
			this.skills = [];
			this.educations = [];
			this.Color = '';
			this.templateChoose = '';

			this.reset = function (){
				this.CandidateModel = {};
				this.educations = [];
				this.skills= [];
				this.experiences = [];
			}

			this.setCandidate = function (candidate){
				this.CandidateModel = candidate;
			}
			this.setExperiences = function (experiences){
				this.experiences = experiences;
			}
			this.setEducations = function (educations){
				this.educations = educations;
			}
			this.setSkills = function (skills){
				this.skills = skills;
			}
		}
		let skillObject = function (title,description,level,yearExperience){
			this.title = title;
			this.description = description;
			this.level = level;
			this.yearExperience = yearExperience;
			this.setID = function (ID){
				this.ID = ID;
			}

			this.isValid = function (){
				if(this.title !== '' && this.description !== '' && this.level !== '' && this.yearExperience !== ''){
					return true;
				}else{
					return false;
				}
			}
		}
		let educationObject = function (title,description,startDate,endDate,whereYouEduc,institut, degree){
			this.title = title;
			this.description = description;
			this.startDate = startDate;
			this.institut = institut;
			this.endDate = endDate;
			this.whereYouEdu = whereYouEduc;
			this.degree = degree;
			this.setID = function (ID){
				this.ID = ID;
			}
			this.isValid = function (){
				if(this.title !== '' && this.institut !=='' && this.description !=='' && this.startDate !=='' && this.endDate !== '' && this.whereYouEdu !== '' && this.degree !== ''){
					return true;
				}else{return false;}
			}
		}
		let experienceObject = function (poste,postDescritp,companie,location,startDate,endDate){
			this.poste = poste;
			this.postDescritp = postDescritp;
			this.startDate = startDate;
			this.endDate = endDate;
			this.location = location;
			this.companie = companie;
			this.Stockages = [];
			this.reset = function (){
				this.Stockages = [];
			}
			this.setID = function (ID){
				this.ID = ID;
			}
			this.get = function (){
				return this;
			}
			this.isValid = function (){
				if(String(this.poste) !== '' &&  String(this.postDescritp) !=='' && this.startDate != null && this.endDate != null && this.companie !='' && this.location !== ''){
					return true;
				}else{
					return false;
				}
			}
			this.array = function (){
				return [this.poste,this.postDescritp,this.companie,this.location ,this.startDate,this.endDate];
			}
			this.getStockages = function (){
				return this.Stockages;
			}
			this.addExperience = function (experience){
				this.Stockages.push(experience);
			}
			this.deleteExperience = function (experineceID){

			}
		}

		function ValidChooseTemplate(event){
			$('#GlobalStep1').fadeToggle();
			$('#GlobalStep2').fadeToggle();
		}
		function SelectTemplate(current,guid){
			let templateGuid = String(guid);
			let url = '/getTemplate'
			$.ajax({
				type:'GET',
				url:url,
				dataType:'json',
				data:{
					tempGuid: templateGuid
				},
				success:function (response){
					templateLoadedSuccess(response.url,response.template);
				},
				error:function (err){
				}
			});
		}
		function templateLoadedSuccess(url,template){
			loadFrameContent(url);
			let currentImageUrl ='/images/CVExmples/' + template.Posted;
			let currentTemp = $('#templateChooseImg');
			currentTemp.attr('src',currentImageUrl);
		    $('.isSelectedTemplate').children('span').remove();
			let templateID = template.Reference;
			currentTemplateChoice = template.TemplateGuid;
			let element = $('#'+ templateID);
			let span = document.createElement('span');
			span.setAttribute('class','ti-check');
			element.children('div[class="isSelectedTemplate"]').append(span);
		}

		function resetExperienceForm(){
			$('#poste').val('');
			tinymce.get('descriptionExperience').setContent('');
			$('#companyName').val('');
			$('#whereYouWork').val('');
			$('#StartDate').val('');
			$('#EndDate').val('');
		}
		function resetEducationForm(){
			$('#titleEdu').val('');
			tinymce.get('descriptionEdu').setContent('');
			$('#descriptionEdu').val('');
			$('#StartDateEdu').val('');
			$('#EndDateEdu').val('');
			$('#whereYouEduc').val('');
			$('#degree').val('');
		}
		function resetSkillForm(){
			$('#skillTitle').val('');
			$('#skillDes').val('');
			tinymce.get('skillDes').setContent('');
			$('#level').val('20');
			$('#yearExperience').val('1');
		}
		function resetCandidateForm(){
			$('#civility').val('');
			$('#Middlename').val('');
			$('#emailAddress').val('');
			$('#phoneNumber').val('');
			$('#location').val('');
			$('#fonction').val('');
			$('#dateOfBirth').val('');
			$('#countryID').val('');
			$('#town').val('');
			$('#nationality').val('');
			$('#resume').val('');
		}
		function selectedColor(color){
			let colorS = $(color).attr('color');
			currentColor = colorS;
			$(color).siblings('div').removeClass('colorIsSelect');
			$(color).addClass('colorIsSelect');
			synchro();
			setColorTemplate();
		}
		function  SubmitSkillForm(element){
			let skillDes = 	tinymce.get('skillDes').getContent();
			let skill = new skillObject($('#skillTitle').val(),skillDes,$('#level').val(),$('#yearExperience').val());
			if(skill.isValid()){
				let ID = skillStock.length + 1;
				skill.setID(ID);
				skillStock.push(skill);
				let body = $('#skillbody');
				body.children('tr').remove();
				for(let i= 0; i<= skillStock.length - 1 ; i++){
					let node = document.createElement('tr');
					let skill = skillStock[i];
					node.setAttribute('id',skill.ID);
					insertRowCell(skill.title,node);
					insertRowCell(skill.description,node);
					insertRowCell(skill.level,node);
					insertRowCell(skill.yearExperience,node);
					insertRowCell(skill.ID,node,1);
					body.append(node);
				}
				resetSkillForm();
			}
			synchro();
		}
		function  SubmitExperienceForm(elemnt){
			let description = tinymce.get('descriptionExperience').getContent();
			let experiences = new experienceObject($('#poste').val(),description,$('#companyName').val(),$('#whereYouWork').val(),$('#StartDate').val(),$('#EndDate').val());
			if(experiences.isValid()){
				let ID = experienceStocks.length + 1;
				experiences.setID(ID);
				experienceStocks.push(experiences);
				let body = $('#bodyID');
				body.children('tr').remove();
				for(let i= 0; i<= experienceStocks.length - 1 ; i++){
					let node = document.createElement('tr');
					let experience = experienceStocks[i];
					node.setAttribute('id',experience.ID);
					insertRowCell(experience.poste,node);
					insertRowCell(experience.postDescritp,node);
					insertRowCell(experience.companie,node);
					insertRowCell(experience.location,node);
					insertRowCell(experience.startDate,node);
					insertRowCell(experience.endDate,node);
					insertRowCell(experience.ID,node,1);
					body.append(node);
				}
				resetExperienceForm();
			}
			synchro();
		}
		function SubmitEducForm(elment){
			let educDesc = 	tinymce.get('descriptionEdu').getContent();
			let education = new educationObject($('#titleEdu').val(),educDesc,$('#StartDateEdu').val(),$('#EndDateEdu').val(),$('#whereYouEduc').val(),$('#whereYouEduc').val(), $('#degree').val());
			if(education.isValid()){
				let ID = educationStocks.length + 1;
				education.setID(ID);
				educationStocks.push(education);
				let body = $('#bodyIDEdu');
				body.children('tr').remove();
				for(let i= 0; i<= educationStocks.length - 1 ; i++){
					let node = document.createElement('tr');
					let education = educationStocks[i];
					node.setAttribute('id',education.ID);
					insertRowCell(education.title,node);
					insertRowCell(education.description,node);
					insertRowCell(education.whereYouEdu,node);
					insertRowCell(education.degree,node);
					insertRowCell(education.startDate,node);
					insertRowCell(education.endDate,node);
					insertRowCell(education.ID,node,1);
					body.append(node);
				}
				resetEducationForm()
			}
			synchro();
		}
		function  ValidateCandidateInfoForm(){
			if($('#firstname').val() !=='' && $('#lastname').val()!=='' && $('#emailAddress').val()!=='' && $('#phoneNumber').val()!=='' && $('#location').val()!==''
			&& $('#fonction').val()!=='' && $('#resume').val()!==''){
				let candidateModel = new candidate($('#firstname').val(),$('#lastname').val(),$('#emailAddress').val(),$('#phoneNumber').val(), $('#fonction').val(), $('#resume').val(),$('#location').val(),$('#dateOfBirth').val(),$('#nationality').val(),$('#countryID').val(),$('#town').val(),$('#civility').val(),$('#Middlename').val());
				candidateModelData = candidateModel;
				return true;
			}
			else{return false;}
		}

		function  ValidateExperiencesList(){
			if(experienceStocks.length === 0){
				return false;
			}else{return true;}
		}
		function  ValidateSkillList(){
			if(skillStock.length === 0){
				return false;
			}else{return true;}
		}
		function ValidateEducations(){
			if(educationStocks.length===0){
				return false;
			}else{return true;}
		}
		function  ExecuteFuncValidationStep(step){
			let authorizeContinu = false;
			switch (parseInt(step)){
				case 1:
					if(ValidateCandidateInfoForm()){
						authorizeContinu = true;
					}
					break;
				case 2:
					if(ValidateExperiencesList()){
						authorizeContinu = true;
					}
					break;
				case 3:
					if(ValidateSkillList()){
						authorizeContinu = true;
					}
					break;
				case 4:
					if(ValidateEducations()){
						authorizeContinu = true;
					}
					break;
				default:
					break;
			}
			return authorizeContinu;
		}
		function synchro(){
			let candStorage = window.sessionStorage.getItem('viewCand');
			let viewobject = null;
			if(candStorage !== null){
				viewobject = JSON.parse(candStorage);
				viewobject.experiences = experienceStocks;
				viewobject.Color = currentColor;
				viewobject.skills = skillStock;
				viewobject.CandidateModel = candidateModelData;
				viewobject.educations = educationStocks;
				viewobject.templateChoose = currentTemplateChoice;
				window.sessionStorage.setItem('viewCand',JSON.stringify(viewobject));
			}
		}
		function RemoveExperience(element,value){
			let body = $('#bodyID');
			let elementID = parseInt(value);
			body.children('tr[id='+elementID+']').remove();
			let findIndex = experienceStocks.findIndex((e)=>e.ID===elementID);
			if(findIndex !== -1){
				experienceStocks.splice(findIndex,1);
			}
			synchro();
		}
		function  insertRowCell(value,rowNew,isDelete = 0){
			let node = document.createElement('td');
			if(isDelete === 1){
				let btn = document.createElement('button');
				btn.setAttribute('type','button');
				btn.textContent = 'Supprimer';
				btn.setAttribute('onClick','RemoveExperience(this,"' + value + '")');
				node.appendChild(btn);
			}else{
				console.log(value);
				node.innerHTML =value;
			}
			rowNew.appendChild(node);
		}
		function  replaceAllValues(searchValue = [],replaceValue = [], value){
			let returnValues = String(value);
			if(searchValue.length !== replaceValue.length){
				return null;
			}
			searchValue.forEach((value,index,arr)=>{
				returnValues = returnValues.replace(value,replaceValue[index]);;
			})
			return returnValues;
		}
		function ChangeTemplateColor(colorItem){
			let colorDefault = templateframe.contentWindow.document.getElementById('defaultColor').value;
			let color = colorItem.getAttribute('color');
			let collectionColorChange = templateframe.contentWindow.document.getElementsByClassName('bg-color-change');
			let collectionBorderChange = templateframe.contentWindow.document.getElementsByClassName('border-change-color');
			let collectionTextChange = templateframe.contentWindow.document.getElementsByClassName('text-color');
			for(let i = 0; i <= collectionColorChange.length - 1 ; i++){
				collectionColorChange[i].style.backgroundColor = color;
			}
			for(let i = 0; i <= collectionBorderChange.length - 1 ;i++){
				collectionBorderChange[i].style.borderColor = color;
			}
			for(let i = 0; i <= collectionTextChange.length - 1 ;i++){
				collectionTextChange[i].style.color = color;
			}
		}
		function setColorTemplate(){
			let colorDefault = currentColor;
			let collectionColorChange = templateframe.contentWindow.document.getElementsByClassName('bg-color-change');
			let collectionBorderChange = templateframe.contentWindow.document.getElementsByClassName('border-change-color');
			let collectionTextChange = templateframe.contentWindow.document.getElementsByClassName('text-color');
			for(let i = 0; i <= collectionColorChange.length - 1 ; i++){
				collectionColorChange[i].style.backgroundColor = color;
			}
			for(let i = 0; i <= collectionBorderChange.length - 1 ;i++){
				collectionBorderChange[i].style.borderColor = color;
			}
			for(let i = 0; i <= collectionTextChange.length - 1 ;i++){
				collectionTextChange[i].style.color = color;
			}
		}
		function  ExecutionCandidateForm(element,action){
			let currentStep = document.getElementById('currentStepForm').getAttribute('current-step');
			if(!ExecuteFuncValidationStep(currentStep) && action ==='next'){
				return false;
			}else{
				switch (action){
					case 'next':
						if(currentStep < 4){
							let nextStep = parseInt(currentStep) + 1;
							let prevElementId = 'form-step-' + String(currentStep);
							let nextElementId = 'form-step-' + String(nextStep);
							$('#' + prevElementId).fadeOut();
							$('#' + nextElementId).fadeIn();
							if(nextStep > 1){
								$('#prevBtn').show();
							}
							document.getElementById('currentStepForm').setAttribute('current-step',String(nextStep));
						}
						else if(currentStep + 1 >= 5){
							$('#GlobalStep2').fadeOut();
							$('#GlobalStep3').fadeIn();
							GenerateCV(null);
						}
						if(currentStep >= 3){
							$('#nextBtn').text('Go').attr('onClick','ExecutionCandidateForm(this,"next");');
						}
						break;
					case 'prev':
						if(currentStep == 1){
							$('#GlobalStep2').fadeOut();
							$('#GlobalStep1').fadeIn();
							resetCandidateForm();
							return;
						}
						if(currentStep > 1){
							let nextStep = parseInt(currentStep) - 1;
							let prevElementId = 'form-step-' + nextStep;
							let buildNextElementId = 'form-step-' + currentStep;
							$('#' + buildNextElementId).fadeOut();
							$('#' + prevElementId).fadeIn();
							document.getElementById('currentStepForm').setAttribute('current-step',String(nextStep));
							if(nextStep <= 1){
								$('#prevBtn').hide();
							}
						}
						if(currentStep <= 1){
							$('#prevBtn').show();
						}
						break;
					default:
						break;
				}
			}

		}
		function MouseLeave(colorItem){
			let colorDefault = templateframe.contentWindow.document.getElementById('defaultColor').value;
			if(currentColor != ''){
				colorDefault = currentColor;
			}
			let collectionColorChange = templateframe.contentWindow.document.getElementsByClassName('bg-color-change');
			let collectionBorderChange = templateframe.contentWindow.document.getElementsByClassName('border-change-color');
			let collectionTextChange = templateframe.contentWindow.document.getElementsByClassName('text-color');
			for(let i = 0; i <= collectionColorChange.length - 1 ; i++){
				collectionColorChange[i].style.backgroundColor = colorDefault;
			}
			for(let i = 0; i <= collectionBorderChange.length - 1 ;i++){
				collectionBorderChange[i].style.borderColor = colorDefault;
			}
			for(let i = 0; i <= collectionTextChange.length - 1 ;i++){
				collectionTextChange[i].style.color = colorDefault;
			}
		}
		window.addEventListener('DOMContentLoaded',function (){
			viewCandidate = new ViewModelCandidate();
			let candidateNew = new candidate('','','','','','');
			candStorage = window.sessionStorage.getItem('viewCand');
			if(candStorage === null){
				 viewCandidate.setCandidate(candidateNew);
				 window.sessionStorage.setItem('viewCand',JSON.stringify(viewCandidate));
				 candStorage = window.sessionStorage.getItem('viewCand');
			}
			else{
				let Viewobject = JSON.parse(candStorage);
				Viewobject.CandidateModel = candidateNew;
				window.sessionStorage.setItem('viewCand',JSON.stringify(viewCandidate));
			}
			synchro();
			$('.no-display').fadeOut();
			let nextButton = document.getElementById('nextBtn');
			let prevButton = document.getElementById('prevBtn');
			let form = document.getElementById('#candidateForm');
			let currentStep = $('#currentStepForm').attr('current-step');
			if(parseInt(currentStep)===0){
				prevButton.style.display='none';
			}
			$('.btn_generate').click(function (event){
				event.preventDefault();
				ValidChooseTemplate(null);
			});
			$('.cv_generate').fadeOut();
			firstnameField.keyup(function (){
				let field = this;
				let value = String($(field).val());
				$('#Ffirstname').val(value);
				let lastNameValue = String($(lastnameField).val());
				$('#Flastname').val(lastNameValue);
				let fullname = value + ' ' + lastNameValue;
				let defaultChange = templateframe.contentWindow.document.getElementById('userName').getAttribute('default-value');
				if((value !== '' || lastNameValue !== '')){
					templateframe.contentWindow.document.getElementById('userName').innerHTML=fullname;
				}
				else{
					templateframe.contentWindow.document.getElementById('userName').innerHTML=defaultChange;
				}
			});
			lastnameField.keyup(function (){
				let field = this;
				let value = String($(field).val());
				let firstNameValue = String($(firstnameField).val());
				$('#Ffirstname').val(firstNameValue);
				let fullname = firstNameValue + ' ' + value;
				$('#Flastname').val(value);
				let defaultChange = templateframe.contentWindow.document.getElementById('userName').getAttribute('default-value');
				if((value !== '' || firstNameValue !== '')){
					templateframe.contentWindow.document.getElementById('userName').innerHTML=fullname;
				}
				else{
					templateframe.contentWindow.document.getElementById('userName').innerHTML=defaultChange;
				}
			});
		});

		/*let Request = function (method, url , rType , payload = null, body = null , headers = [],parameters = []){
			this.method = method;
			this.body = body;
			this.url = url;
			this.responseType = rType;
			this.parameters = parameters;
			this.payload = payload;
			this.xmlhttp = window.XMLHttpRequest ? (new XMLHttpRequest()) : (new ActiveXObject('Microsoft.XMLHTTP'));
		};

		Request.prototype.initFetchObject = function (callback){
			let self = this;
			if(self.xmlhttp != null){
				self.xmlhttp.responseType = self.responseType;
				self.xmlhttp.open(self.method,self.url,true);
			}else{throw  new Error("L'object de la requete ne pas pas etre est null.")}
			self.xmlhttp.onreadystatechange = function (event){
				callback(event,self.payload);
			}
		}
		Request.prototype.setHeader = function (headerType,value){
			let self = this;
			self.xmlhttp.setRequestHeader(headerType,value);
		}
		Request.prototype.sendRequest = function (){
			let self = this;
			switch (self.method) {
				case 'GET':
					self.xmlhttp.send(null);
					break;
				case 'POST':
					self.xmlhttp.send(self.body);
					break;
				default:
					throw new Error('Méthode inconnu.');
			}
		}*/

		function GenerateCV(elment){
			let url ='/generateTempl';
			let candStorage = window.sessionStorage.getItem('viewCand');
			console.log(candStorage);
		    let process_start = $('#process_start');
			process_start.attr('value','40');
			setInterval(function (){
				let attrValue = parseInt(process_start.attr('value'));
				attrValue += 10;
				$('#process_start').attr('value',String(attrValue));
			},5000)
			setTimeout(function (){
				$.ajax({
					type:'POST',
					url:url,
					dataType:'json',
					data:{
						dataView: candStorage
					},
					success:function (response){
						loadFrameContentV2(response.urlView,response.Guid);
					},
					error:function (err){
						console.log(err);
					}
				});
			},10000);
		}

		function loadFrameContentV2(url,tempGuid = ''){
			$('#GlobalStep3').fadeOut();
			let frame = document.getElementById('cv_generate');
			if(url){
				frame.setAttribute('src',url);
			}else{
				frame.setAttribute('src','http://localhost:8000');
			}
			let urlPDFLink = '/getPDFCV/' + tempGuid;
			$('#PDFLink').attr('href',urlPDFLink);
			$('.cv_generate').fadeIn();
		}

		function loadFrameContent(url){
			let frame = document.getElementById('template-frame');
			if(url){
				frame.setAttribute('src',url);
			}else{
				frame.setAttribute('src','http://localhost:8000');
			}
		}
	</script>
	 <script  src="/js/fmaJS.js"></script>
	</body>
</html>
